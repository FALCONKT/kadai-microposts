TwetterClone

KK
多　対　多

概要
User　Userがお気に入りを追加した投稿内容　の関係



User  Micropost    多　対　多　の関係


中間Table

Table名は favorites

id  timrstamp()
の他に・・・

user_id  micropost_id
項目2つが必要

左Table　　　　　　　右Table
user_id      micropost_id

「user_id が 1 のUserは micropost_id が 2 の投稿内容をお気に入りに追加した」

「 micropost_id が 2 の投稿内容は user_id が 1 のUSerからお気に入りに追加された」

user_id と micropost_id のそれぞれに外部Key制約

user_id と micropost_id の組み合わせの重複を許さない制約


お気に入りを追加・削除する機能だけでなく
「あるUserが追加したお気に入りの一覧と数」を取得する

お気に入りの一覧を取得する機能は

・User Model
favorites() のような名前の関数
belongsToMany() を指定する。

お気に入りの数の取得
・Controller
app/Http/Controllers/Controller.php
の中で定義

更に
・Micropost Model　にも
favorite_users() のような名前の関数
belongsToMany() を指定する。

多対多の関係を正確に記述する



お気に入りに関するAction　View　作成

1　Userが追加したお気に入りを一覧表示するPage

2　Userが特定の投稿内容をお気に入りに追加する機能

3　Userがお気に入りを削除する機能


1　User Molde
favorites() から一覧の取得が出来るので
UsersController にActionを追加すれば良い

Viewの作成
Followings や Followers と同じように 「お気に入り一覧へのリンク」と「お気に入りの数」を表示


2　3　　Controllerで
中間Table　を操作　する
FavoritesController のような名前の Controller を新規作成
データの登録／削除を実行するActionのため、View は不要( back() で戻る )

実際の中間テーブルへのデータ登録／削除は
・User Modelに
favorite() や unfavorite() のような名前の関数を作成

・View投稿一覧の各投稿のところに
favorite や unfavorite のButtonを設置

・Routing
今回の場合、URLで渡したいIDは Micropost のIDになる
Follow／Followerのものとは違う　新しいGroup を auth Groupの中に用意


Follow／Follower機能で作成しCodeは非常に参考になります.


！！！！！！！！！！！！！！！！！！！！！！！！！！！！！！！！！
Processs

KK
多　対　多

1
！！！！！！！！！！！！！！！！！！！！！
概要
User　Userがお気に入りを追加した投稿内容　の関係

User  Micropost    多　対　多　の関係


2
！！！！！！！！！！！！！！！！！！！！！
中間Table
Table名は favorites

id  timrstamp()
の他に・・・

user_id  micropost_id
項目2つが必要

左Table　　　　　　　右Table
user_id      micropost_id


「user_id が 1 のUserは micropost_id が 2 の投稿内容をお気に入りに追加した」

user_id 　→   micropost_id

「 micropost_id が 2 の投稿内容は user_id が 1 のUSerからお気に入りに追加された」

micropost_id　→　user_id

〇
user_id と micropost_id のそれぞれに外部Key制約
〇
user_id と micropost_id の組み合わせの重複を許さない制約

でMigarartion

全般に
「Follow／Follower機能で作成しCodeは非常に参考になります.」


３
！！！！！！！！！！！！！！！！！
実装
Migration
DB　micriposts
中間Table名　　favorites　　で

例
$ php artisan make:migration create_user_follow_table --create=user_follow

実物
$ php artisan make:migration create_favorites_table --create=favorites

up() と down()

    public function up()
    {
    	//Table名指定
        Schema::create('favorites', function (Blueprint $table) {
            $table->increments('id');
            
            $table->integer('user_id')->unsigned()->index();

            $table->integer('micropost_id')->unsigned()->index();
            
            $table->timestamps();

            // 外部KEY設定
            $table->foreign('user_id')->references('id')->on('users')->onDelete('cascade');

            $table->foreign('micropost_id')->references('id')->on('users')->onDelete('cascade');

            // user_idとfollow_idの組み合わせの重複を許さない
            $table->unique(['user_id', 'micropost_id']);
        });
    }

    public function down()
    {
        Schema::dropIfExists('user_follow');
    }

解説

部分$table->unique(['user_id', 'micropost_id']);
一度保存したお気に入り関係を何度も保存しようとしないようにTableの制約

部分
onDelete('cascade');
消したときの処理
cascade: 一緒に消す (このTableのDataも一緒に消える)　＝あくまで一過性の関係


Migration実行
$ php artisan migrate


DBにTable　＝　中間Tableが作成された

mysql> describe favorites;
+--------------+------------------+------+-----+---------+----------------+
| Field        | Type             | Null | Key | Default | Extra          |
+--------------+------------------+------+-----+---------+----------------+
| id           | int(10) unsigned | NO   | PRI | NULL    | auto_increment |
| user_id      | int(10) unsigned | NO   | MUL | NULL    |                |
| micropost_id | int(10) unsigned | NO   | MUL | NULL    |                |
| created_at   | timestamp        | YES  |     | NULL    |                |
| updated_at   | timestamp        | YES  |     | NULL    |                |
+--------------+------------------+------+-----+---------+----------------+
5 rows in set (0.00 sec)



5
！！！！！！！！！！！！！！！！！！！！！！
概要
お気に入りを追加・削除する機能だけでなく
「あるUserが追加したお気に入りの　一覧　と　数　」を取得する


お気に入りの一覧を取得する機能は・・・・　→
・User Model
favorites() のような名前の関数
belongsToMany() を指定する。


お気に入りの数の取得する機能は・・・・　→
・Controller
app/Http/Controllers/Controller.php
の中で定義

更に
・Micropost Model　にも
favorite_users() のような名前の関数
belongsToMany() を指定する。

多対多の関係を正確に記述するため
！！！！！！！！！！！！！！！！！！！！！！



6
！！！！！！！！！！！！！！！！！！！！！！


現状把握

・Table　User に　対して　行う　ため

User　Model　＞＞

app/User.php
例
「user_id が 1 のUserは micropost_id が 2 の投稿内容をお気に入りに追加した」　
			    対象は　					

例
「 micropost_id が 2 の投稿内容は user_id が 1 のUSerからお気に入りに追加された」
				対象先は　micropost



Model＞＞
中間Table　のためだけの　Modelは不要

対して
UserModel に追記
お気に入り　の関係の場合、多対多の関係が User に対するものはなので、
どちらも User の Model File　に記述


前段から・・・　具体例
「user_id が 1 のUserは micropost_id が 2 の投稿内容をお気に入りに追加した」　〇
取得する対象は　user_id    追加したため　この　数　がお気に入り一覧　となる。

「 micropost_id が 2 の投稿内容は user_id が 1 のUserからお気に入りに追加された」　別
取得する対象は　micropost_id　

〇〇〇〇〇〇
User　が
お気に入り している　つぶやき
favorites() 
直訳　お気に入り　達　を取得する


別
User　に
お気に入り されている　「つぶやき」
favorite_users()
直訳　お気に入りUser達　を取得する

引数　4つ

app/User.php
部分

public function favorites(){

例
return $this->belongsToMany(User::class, 'Table名', 'user_id', 'micropost_id')->withTimestamps();
〇実際　
return $this->belongsToMany(User::class, 'favorites', 'user_id', 'micropost_id')->withTimestamps();
}


！！！！！！！！！！！！！！！！！！！！！！！！！！！！！
favarited       unfavarited　　の関係
名称を過去形にして分かりやすくした
！！！！！！！！！！！！！！！！！！！！！！！！！！！！！


既にfavariteしているか
相手が自分自身ではないか


別
User　が
お気に入り している　つぶやき
favorites() 
直訳　お気に入り　達


〇〇〇〇〇〇
User　に
お気に入り されている　「つぶやき」
favorite_users()
直訳　お気に入りUser　達

引数　4つ

app/Micropost.php
部分

public function favorite_users(){

例
return $this->belongsToMany(User::class, 'Table名', 'user_id', 'micropost_id')->withTimestamps();

〇実際
return $this->belongsToMany(User::class, 'favorites','micropost_id','user_id')->withTimestamps();
}

！！！！！！！！！！！！！！！！！！！！！！！！
参考
following　follower　　は　User　に対してだけ支援　支援しない　とだけしているだけ

+------------+------------------+------+-----+---------+----------------+
| Field      | Type             | Null | Key | Default | Extra          |
+------------+------------------+------+-----+---------+----------------+
| id         | int(10) unsigned | NO   | PRI | NULL    | auto_increment |
| user_id    | int(10) unsigned | NO   | MUL | NULL    |                |
| follow_id  | int(10) unsigned | NO   | MUL | NULL    |                |
| created_at | timestamp        | YES  |     | NULL    |                |
| updated_at | timestamp        | YES  |     | NULL    |                |
+------------+------------------+------+-----+---------+----------------+

！！！！！！！！！！！！！！！！！！！！！！！！
↓
今回

+--------------+------------------+------+-----+---------+----------------+
| Field        | Type             | Null | Key | Default | Extra          |
+--------------+------------------+------+-----+---------+----------------+
| id           | int(10) unsigned | NO   | PRI | NULL    | auto_increment |
| user_id      | int(10) unsigned | NO   | MUL | NULL    |                |
| micropost_id | int(10) unsigned | NO   | MUL | NULL    |                |
| created_at   | timestamp        | YES  |     | NULL    |                |
| updated_at   | timestamp        | YES  |     | NULL    |                |
+--------------+------------------+------+-----+---------+----------------+
今回

DB  microposts 内
中間Table　favorites
user_id    micropost_id

大前提　もともと　一　対　多であった
それが　多　対　多　となったということ

先ずは　中間Table　の作成のみで良い


＞参考例
Following()  Follower()  の関係 
$user->followings で $user が フォローしている User 達を取得することができます。 
$user->followers も同様で $user をフォローしている User 達を取得可能です。

followings は User が フォローしている User 達で、 followers は User を フォローしている User 達です。

＞今回
favorite()　favorited()　の関係　　
$user -> favorite で $user 　「が」　　お気に入り　している Micropost 達を取得することができます。 
$user -> favorited も同様で $user　「を」　お気に入り　している Micropost 達を取得可能です。

！！！！！！！！！！！！！！！！！！！！！！！！！！！！！！！！！！！！！！！！！！！
favorite は User 「が」 お気に入りしている Micropost達
favorited は Micropost 「を」 お気に入りしている User 達
！！！！！！！！！！！！！！！！！！！！！！！！！！！！！！！！！！！！！！！！！！！

=============================================================
app/User.php

   // User　がお気に入り している　つぶやき
    public function favorite(){
        //UserClassの中の　中間Table名　の中の　user_id　と　micropost_id　を返す
        // 更に　その時間を保存
        return $this->belongsToMany(User::class,'favorites', 'user_id', 'micropost_id')->withTimestamps();
    }
    
    // User　がお気に入り されている　つぶやき
    public function favorite_d(){
        //UserClassの中の　中間Table名　の中の　micropost_id　と　user_id　を返す
        // 更に　その時間を保存
        return $this->belongsToMany(User::class,'favorites','micropost_id','user_id')->withTimestamps();
    }

    // ！！！！！！！！！！！！！！！！！！！！！！！！！！！！！
    // favarited       unfavorited　　の関係
    // 過去形の関数名称に。
    
    // お気に入りに入れる、お気に入りを解除するという機能
    // ！！！！！！！！！！！！！！！！！！！！！！！！！！！！！
    
    // お気に入りをするための動き　ゆくゆくButton選択　// 選択するのは　$micropostId
    public function favorited($micropostId)
    {
        // 既に favorites　しているか の確認　　関数は　別で定義
        // $this->id はLogInUserのuser_id   User内のthisは全般にUser自身のLogInID
        // $micropostId　は　MicropostController経由で来る
        $exist = $this->is_favoriting($micropostId);
        
        // 投稿IDが 自分自身のではないか の確認
        // これではUserID　と　現在のUserIdを比較しているに過ぎない　
        // $its_me = $this->id == $userId;
        
        // そのため　is_favoriting($micropostId)＝Favoriteされた　$micropostId　が　現在の　$micropostId　と等しいか比較
        // $its_me = $this->is_favoriting($micropostId) == $micropostId;
        //既に　存在しているためこの指定は不要
    
        if ($exist || $its_me) {
            // 既に favorite　していれば 何もしない
            return false;
        } else {
            // 未 favorite であれば favorite =　$micropostId　する
            $this->favorite()->attach($micropostId);
            return true;
        }
    }

    // お気に入りを消すための動き　ゆくゆくButton選択　選択するのは　$micropostId
    public function unfavorited($micropostId)
    {
        // 既に favorites　しているか の確認　　関数は　別で定義
        // $this->id はLogInUserのuser_id   User内のthisは全般にUser自身のLogInID
        // $micropostId　は　MicropostController経由で来る
        $exist = $this->is_favoriting($micropostId);
        
        
        // 投稿IDが 自分自身のではないか の確認
        // これではUserID　と　現在のUserIdを比較しているに過ぎない　
        // $its_me = $this->id == $userId;
        // そのため　is_favoriting($micropostId)＝Favoriteされた　$micropostId　が　現在の　$micropostId　と等しいか比較        // $its_me = $this->id == $micropostId;
       // $its_me = $this->is_favoriting($micropostId) == $micropostId;
		//既に　存在しているためこの指定は不要

    
        if ($exist && !$its_me) {
            // 既に favorites していれば favorite　＝　$micropostId を外す
            $this->favorites()->detach($micropostId);
            return true;
        } else {
            // 未 favorites であれば何もしない
            return false;
        }
    }
    
    // お気に入りにしているか確認する
    //is_favoriting 関数定義(独自)　favorited　unfavarited　で使用する。
    // favarite している　=　favarit「ing」 から 関数名設定
    // 投稿をClikcするので$micropostIdが入ってくる。
    public function is_favariting($micropostId)
    {
    		          //this は　自分のUserのId →　つぶやき関数実行　→
    		          //中間TableのつぶやきId=micropost_id　が　実際のつぶやきId＝$micropostId
    		          //として　存在しているか
        return $this->favorite()->where('micropost_id', $micropostId)->exists();
    }

=============================================================


参考URL！！！！！！！！！！！！！！！！！！！！！
やっていることは限りなく近いものだが別物
簡素な書き方で最も参考になる
https://teratail.com/questions/185225

引数には投稿idを入れる概念を得る。

また変数名は　事前の変数を利用してしまうというのも手

現在の投稿Idは
$this->is_favorite($articleId);

is_favoriting($micropostId)＝Favoriteされた　$micropostId　
これが
「現在の」　$micropostId　と等しいか比較        


他人参考
同じくTECKACADEMY受講者
https://u-tan-web.com/profile/


Follow機能のみであるが少し参考になる。
http://frontendmemo.work/laravel%E3%81%A7%E3%81%8A%E6%B0%97%E3%81%AB%E5%85%A5%E3%82%8A%E6%A9%9F%E8%83%BD%E3%82%92%E4%BD%9C%E3%82%8B/


ーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーー
php artisan tinker 　Test

Userを登録　　Web上から
+----+------+------------------------+--------------------------------------------------------------+--------------------------------------------------------------+---------------------+---------------------+
| id | name | email                  | password                                                     | remember_token                                               | created_at          | updated_at          |
+----+------+------------------------+--------------------------------------------------------------+--------------------------------------------------------------+---------------------+---------------------+
|  1 | test | test@test.com          | test   (転記)  | NULL                                                         | 2021-02-06 06:31:00 | 2021-02-06 06:31:00 |
|  2 | KT   | falcon9628@yahoo.co.jp | falcon96289628 (転記)| oEfKcrw1AJ2u609hxmdwNiYkyT4bPWfcTI8hWvMtWAoxkMVMCora58Quvv4p | 2021-02-07 02:44:08 | 2021-02-07 02:44:08 |
|  3 | KT2  | kr2@yahoo.co.jp        | 9999           | NULL                                                         | NULL                | NULL                |
|  4 | KT3  | kr3@yahoo.co.jp        | 1111           | NULL                                                         | NULL                | NULL                |
+----+------+------------------------+--------------------------------------------------------------+--------------------------------------------------------------+---------------------+---------------------+


user_id    micropost_id
1               1
2               2
3               3
4               4


！！！！！！！！！！！！！！！！！！！！！！！！！！！
Modelを両方指定する　両方取得出来る

use App\User

use App\Micropost


$user1 = User::find(1)

userの一人目のことを取得している

！！！！！！！！！！！！！！！！！！！！！！！！！！！！！！！！！
次はが投稿IDを取得すべき 
変数名は何でもよい

$micropost_any = Micropost::find(5)

5としている

参考！！！！！！！！！！！！！！！！！！！！！！！！！！！！！！！
$micropost_any = Micropost::find(2)✖
micropostsの2つ目のことを取得している。
(2)～（3）　は無い　
消したため

現状id　1　無　無　無　無　5　6・・・
mysql> select*from microposts;
+----+---------+----------------+---------------------+---------------------+
| id | user_id | content        | created_at          | updated_at          |
+----+---------+----------------+---------------------+---------------------+
|  1 |       1 | micropost test | 2021-02-07 14:56:08 | 2021-02-07 14:56:08 |
|  5 |       2 | ああああ       | 2021-02-08 00:26:48 | 2021-02-08 00:26:48 |
|  6 |       2 | ああああ       | 2021-02-08 00:26:51 | 2021-02-08 00:26:51 |
|  7 |       2 | ああああ       | 2021-02-08 00:26:54 | 2021-02-08 00:26:54 |
|  8 |       2 | IIIII          | 2021-02-08 00:27:29 | 2021-02-08 00:27:29 |
|  9 |       2 | IIII           | 2021-02-08 00:27:34 | 2021-02-08 00:27:34 |
| 10 |       2 | ｆｆｆｆ       | 2021-02-12 07:01:14 | 2021-02-12 07:01:14 |
| 11 |       2 | ffff           | 2021-02-12 07:32:18 | 2021-02-12 07:32:18 |
| 12 |       1 | sssssss        | 2021-02-15 01:02:42 | 2021-02-15 01:02:42 |
| 13 |       1 | ssssssss       | 2021-02-15 01:02:44 | 2021-02-15 01:02:44 |
| 15 |       1 | qqqqdeqdqedqw  | 2021-02-15 01:02:51 | 2021-02-15 01:02:51 |
+----+---------+----------------+---------------------+---------------------+
11 rows in set (0.00 sec)

！！！！！！！！！！！！！！！！！！！！！！！！！！！！！！！！！

$user1->favorited($micropost_any->id)

Error 下記のようなものだった
Illuminate/Database/QueryException with message 'SQLSTATE[23000]: Integrity constraint violation: 1452 Cannot add or update a child row: a foreign key constraint fails (`microposts`.`favorites`, CONSTRAINT `favorites_micropost_id_foreign` FOREIGN KEY (`micropost_id`) REFERENCES `users` (`id`) ON DELETE NO ACTION) (SQL: insert into `favorites` (`created_at`, `micropost_id`, `updated_at`, `user_id`) values (2021-02-15 05:34:04, 5, 2021-02-15 05:34:04, 1))'

！！！！！！！！！！！！！！！！！！！！！！！！！！！！！！！！！！！

→　外部Key制約がおかしい
参考Ⅰ　最も参考
https://teratail.com/questions/208797

参考２
https://living-sun.com/ja/php/618518-what-is-this-error-sqlstate23000-integrity-constraint-violation-1452-cannot-add-or-update-a-child-row-a-foreign-key-constraint-fails-php-laravel.html


migaration にて・・・
_create_favorites_table.phpで、favorites.micropost_idの外部キー制約先がmicropostsなのにusersになったまま

制約先　は　その発生源である　microposts Table 最後にsがつく点が忘れやすい。。

〇〇〇〇〇〇〇〇〇〇〇〇

$user1->favorited($micropost_any->id)
favarited実行

→　true
!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
favarited　したかどうか  → 実際してない　ので　true

そのためこれで一回　Table　favorites　に書き込まれる。　　多　対　多　の中間Tableが完成したことになる。

mysql> select*from  favorites;
+----+---------+--------------+---------------------+---------------------+
| id | user_id | micropost_id | created_at          | updated_at          |
+----+---------+--------------+---------------------+---------------------+
|  5 |       1 |            5 | 2021-02-15 07:22:54 | 2021-02-15 07:22:54 |
+----+---------+--------------+---------------------+---------------------+
1 row in set (0.00 sec)

こちらは重複登録出来ない！！
2回同じCommandを実行できない


$user1->favorite()->get()
その中身参照

=> Illuminate\Database\Eloquent\Collection {#4038
     all: [
       App\Micropost {#4026
         id: 5,
         user_id: 2,
         content: "ああああ",
         created_at: "2021-02-08 00:26:48",
         updated_at: "2021-02-08 00:26:48",
         pivot: Illuminate\Database\Eloquent\Relations\Pivot {#4037
           user_id: 1,
           micropost_id: 5,
           created_at: "2021-02-15 07:22:54",
           updated_at: "2021-02-15 07:22:54",
         },
       },
     ],
   }



$user1->unfavorited($micropost_any->id)
unfavarited　実行

favorites　Tableから該当	Dataが消える。

$user1->favorites()->get()

その中身は　空　に
ーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーー


6
！！！！！！！！！！！！！！！！！！！！！
お気に入りの一覧を取得する機能
favorites() のような名前の関数　〇
belongsToMany 　　Method　利用

他　MessageBoradの
-------------------------------
    public function counts($user) {
        $count_favorites = $user->favorites()->count();
        //変数名指定して　代入している。　

        return [
            'count_favorites' => $count_favorites,
        ];
        //文字列で返す
    }
---------------------------------


Lesson 15Chapter 11.1
User モデルに機能追加
を参考

=============================================================
app/User.php

    // ADD　2
    // お気に入りの一覧を取得する機能
    // お気に入りの　数　を取得する　favorites　と複数形での関数名称
    // 参考　Follow　Follower　TimeLine用のMicropostを取得するためのMethodを実装
    public function favorites(){

        // 数を返す！！　this は　UserのId　　UserModelから　favorites の数を取ってくる。

        // 現在形の関数名の方を実行　pluck() は与えられた引数のTableのColumn名だけを抜き出す命令　それを配列化する
        // お気に入りしたUserId 配列　は　User　が　favorite している　micropost　の　Id　を　選んで取得し　配列化する     
        // $favorite_user_ids = $this->favorite()->pluck('〇〇.id')->toArray();
        $favorite_user_ids = $this->favorite()->pluck('microposts.id')->toArray();

        // その配列に　自分の micripost(投稿)Id も追加する　自分自身のmicropostも含めるため
        $favorite_user_ids[] = $this->id;

 // microposts Table　の user_id Columnで $follow_user_ids の中にある micropostsのid を含むもの全てを取得して return
        return $this->belongsToMany(Micropost::whereIn('user_id', $favorite_user_ids)）;

    }
=============================================================



7
！！！！！！！！！！！！！！！！！！！！！！！！
更に
・Micropost Model　にも
favorite_users() のような名前の関数　〇
belongsToMany() を指定する。

多対多の関係を正確に記述するため
→　User 連携するための記述をする。


・Table　Micropost　のData　を取得出来る

Micrpost　Model＞＞
app/Micripost.php
User Model との連携

=============================================================
/microposts/app/Micropost.php
追加
    
    // userの情報をつなぐ　多　対　多
    public function favorite_users()
    {
        return $this->belongsToMany(User::class);
    }
=============================================================


8
！！！！！！！！！！！！！！！！！！！！！！！！
お気に入りの数の取得する機能は・・・・
・Controller
app/Http/Controllers/Controller.php
の中で定義

「フォロー／フォロワー数のカウント」　参考

前Section　参考にする。
お気に入りの数　をCountする機能　を追加

Controller
既に　follow follower の関係を設定している箇所で再設定する。

=============================================================
app/Http/Controllers/Controller.php（class部分のみ）
追加

class Controller extends BaseController
{
    use AuthorizesRequests, DispatchesJobs, ValidatesRequests;

    public function counts($user) {
        $count_microposts = $user->microposts()->count();
        $count_followings = $user->followings()->count();
        $count_followers = $user->followers()->count();

        実際のお気にいり数
        $count_favorite = $user->davorite()->count();

        return [
            'count_microposts' => $count_microposts,
            'count_followings' => $count_followings,
            'count_followers' => $count_followers,

            'count_followers' => $count_followers,
        ];
    }

}
=============================================================







9
！！！！！！！！！！！！！！！！！！！！！！！！
概要
お気に入りに関するAction　と　View　作成
Actionは各種Controller　更に　Viewを作成する。

1　Userが追加したお気に入りを一覧表示するPage
favorites() から一覧の取得が出来るので
UsersController にActionを追加すれば良い


2　Userが特定の投稿内容をお気に入りに追加する機能
3　Userがお気に入りを削除する機能

中間Table　を操作　する
FavoritesController のような名前の Controller を新規作成
データの登録／削除を実行するActionのため、View は不要( back() で戻る )

実際の中間テーブルへのデータ登録／削除は
・User Modelに
favorite() や unfavorite() のような名前の関数を作成

・View投稿一覧の各投稿のところに
favorite や unfavorite のButtonを設置

・Routing
今回の場合、URLで渡したいIDは Micropost のIDになる
Follow／Followerのものとは違う　新しいGroup を auth Groupの中に用意



１０
！！！！！！！！！！！！！！！！！！！！！！！！！
実装
1　Userが追加したお気に入りを一覧表示するPage　に関して
User Moldel　favorites() から一覧の取得が出来るので
UsersController にActionを追加すれば良い

Controller＞＞
UsersController　内に

関数
独自命名
favarite_index

UserModelの
favorites() 関数から一覧の取得


=============================================================
app/Http/Controllers/UsersController.php


頭に追加
use App\Micropost; // 追加

中に追加

//ここには　user が登録したお気に入りの　micropost が来る
関数名自由
public function favarite_index($id)
    {
    	//Userが行った　お気に入り件数を取得する
        $user = User::find($id);
        $favorite = $user->favorite()->paginate(10);

        $data = [
            'user' => $user,
            'favorite' => $favorite,
        ];

        $data += $this->counts($user);

        return view('users.favorite_page', $data);
        //favorite_page　へ　遷移
    }

follow  follower の関係と違って　Favorite Page　が単独なため　関数は一つ 




=============================================================


Viewの作成
Followings や Followers と同じように 「お気に入り一覧へのLink」と「お気に入りの数」を表示

View＞＞
Userが追加したお気に入りを一覧表示するPage作成
部品化したblade.php を利用

Nab
「お気に入り一覧へのリンク」追加
既存
navbar.blade.php  にLink 先

Tab
「お気に入りの数」表示　Tab部
resources/views/users/navtabs.blade.php


完全新規
お気に入り一覧Page　作成　　新規
favorite_page.blade.php

show.blade.php  設置
　　
ここに　favorite_page.blade.php　　を　includeする。



お気に入り一覧Page　作成　　新規
favorite_page.blade.php
参考
followings　follower   と同様の構造　　ここにいろいろ　includeしている。

=============================================================
/microposts/resources/views/users/favorite_page.blade.php
新規

@extends('layouts.app')

@section('content')
    <div class="row">
        <aside class="col-sm-4">
            @include('users.card', ['user' => $user])
        </aside>
        <div class="col-sm-8">
            @include('users.navtabs', ['user' => $user])
            @include('users.users', ['users' => $users])
        </div>
    </div>
@endsection
=============================================================








resources/views/users/show.blade.php

そのまま　　Nav  




１１
！！！！！！！！！！！！！！！！！！！！！！！！！
実装
2　3　　Controllerで
中間Table　を操作　する
FavoritesController のような名前の Controller を新規作成
データの登録／削除を実行するActionのため、View は不要( back() で戻る )

実際の中間テーブルへのデータ登録／削除は
・User Modelに
favorite() や unfavorite() のような名前の関数を作成

・View投稿一覧の各投稿のところに
favorite や unfavorite のButtonを設置

・Routing
今回の場合、URLで渡したいIDは Micropost のIDになる
Follow／Followerのものとは違う　新しいGroup を auth Groupの中に用意

Controller＞＞

FavoritesController　内に

お気に入りしたとき　＝　Dataの登録を実行　　処理だけ
関数　　
store　

お気に入りを取りやめたとき　＝　削除を実行　処理だけ
関数　　
destroy

作成
$ php artisan make:controller FavoritesController

=============================================================
app/Http/Controllers/FavoritesController.php
store と destroy　新規　


namespace App\Http\Controllers;

use Illuminate\Http\Request;

class FavoritesController extends Controller
{
    public function store(Request $request, $id)
    {
    	//過去形の関数名の方
        \Auth::user()->favorited($id);
        return back();
        //若しくは　
       	//redirect あたり
    }

    public function destroy($id)
    {
    	//過去形の関数名の方　unの方
        \Auth::user()->unfavorited($id);
        return back();
        //若しくは　
       	//redirect あたり
    }
}

=============================================================




View＞＞
Buttonで　favorite  unfavorite 切り替え
bladeの部品を作成する。
色
白　unfavorited  class="btn btn-light"
緑　favorited  class="btn btn-success"

=============================================================
resources/views/user_favorite/favorite_button.blade.php
新規

@if (Auth::id() != $user->id)
    @if (Auth::user()->is_favoriting($user->id))
        {!! Form::open(['route' => ['user.unfavorited', $user->id], 'method' => 'delete']) !!}
            {!! Form::submit('お気に入りしていない', ['class' => "btn btn-light btn-block"]) !!}
        {!! Form::close() !!}
    @else
        {!! Form::open(['route' => ['user.favorited', $user->id]]) !!}
            {!! Form::submit('お気に入り', ['class' => "btn btn-success btn-block"]) !!}
        {!! Form::close() !!}
    @endif
@endif
=============================================================



Router＞＞
=============================================================
routes/web.php
auth 部　へ　追記　


// 追加
Route::group(['prefix' => 'microposts/{id}'], function () {
    Route::post('favorite', 'FavoritesController@store')->name('favorites.favorite');
    Route::delete('unfavorite', 'FavoritesController@destroy')->name('favorites.unfavorite');
});
=============================================================
